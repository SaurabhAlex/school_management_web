# This workflow will deploy the React application to Amazon EC2
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an EC2 instance:
#    - Instance type: t2.micro
#    - OS: Ubuntu
#    - Security Group with ports: 22 (SSH), 80 (HTTP), 443 (HTTPS), 3000 (Dev server)
#
# 2. Add these secrets in GitHub repository (Settings > Secrets and Variables > Actions):
#    - AWS_ACCESS_KEY_ID: Your AWS access key (Never share in plain text!)
#    - AWS_SECRET_ACCESS_KEY: Your AWS secret key (Never share in plain text!)
#    - EC2_HOST: Your EC2 instance's PUBLIC IP address
#    - EC2_SSH_KEY: Your EC2 instance's private SSH key (the .pem file content)
#
# 3. Install required software on EC2:
#    - Node.js 18.x
#    - npm
#    - nginx
#    - pm2 (will be installed by the workflow)

name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1        # Default region, change if needed
  EC2_USERNAME: ubuntu         # Using Ubuntu as specified
  NODE_ENV: production
  VITE_API_BASE_URL: ${{ secrets.BACKEND_URL }}

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Clean install dependencies
      run: |
        rm -rf node_modules
        rm -f package-lock.json
        npm cache clean --force
        npm install
        npm install -g typescript
        npm install --save-dev @types/react @types/react-dom @types/node
        npm install --save-dev vite @vitejs/plugin-react

    - name: Type check
      run: npx tsc --noEmit

    - name: Build application
      run: |
        npm run build
      env:
        CI: false # Prevents treating warnings as errors
        VITE_API_BASE_URL: ${{ secrets.BACKEND_URL }}

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        # Create a temporary directory for deployment
        ssh ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/app-temp"
        
        # Copy the build files to EC2
        scp -r ./dist/* ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app-temp/
        
        # Deploy the new version
        ssh ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
          # Install or update pm2 if not present
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          # Stop the existing PM2 process if it exists
          pm2 stop frontend || true
          
          # Remove old files
          sudo rm -rf /var/www/html/*
          
          # Move new files to Nginx directory
          sudo mv ~/app-temp/* /var/www/html/
          
          # Clean up temp directory
          rm -rf ~/app-temp
          
          # Ensure Nginx is installed and running
          if ! command -v nginx &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
          fi
          
          # Configure Nginx with proper headers and routing
          sudo tee /etc/nginx/sites-available/frontend << 'EOF'
          server {
              listen 80;
              server_name _;
              
              root /var/www/html;
              index index.html;
              
              # Enable gzip compression
              gzip on;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
              
              location / {
                  try_files \$uri \$uri/ /index.html;
                  add_header Cache-Control "no-cache, no-store, must-revalidate";
              }
              
              location /static {
                  expires 1y;
                  add_header Cache-Control "public, no-transform";
              }
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN";
              add_header X-XSS-Protection "1; mode=block";
              add_header X-Content-Type-Options "nosniff";
              add_header Referrer-Policy "strict-origin-when-cross-origin";
              add_header Content-Security-Policy "default-src 'self' ${{ secrets.BACKEND_URL }}; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;";
          }
          EOF
          
          # Enable the site and remove default
          sudo ln -sf /etc/nginx/sites-available/frontend /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test and reload Nginx
          sudo nginx -t && sudo systemctl reload nginx
        "
