# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1        # Default region, change if needed
  EC2_USERNAME: ubuntu         # Using Ubuntu as specified
  NODE_ENV: production

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        CI: false # Prevents treating warnings as errors

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

    - name: Add EC2 to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        # Create a temporary directory for deployment
        ssh ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "mkdir -p ~/app-temp"
        
        # Copy the build files to EC2
        scp -r ./dist/* ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:~/app-temp/
        
        # Deploy the new version
        ssh ${{ env.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
          # Install or update pm2 if not present
          if ! command -v pm2 &> /dev/null; then
            sudo npm install -g pm2
          fi
          
          # Stop the existing PM2 process if it exists
          pm2 stop frontend || true
          
          # Remove old files
          rm -rf ~/app/*
          
          # Move new files
          mkdir -p ~/app
          mv ~/app-temp/* ~/app/
          
          # Clean up temp directory
          rm -rf ~/app-temp
          
          # Ensure Nginx is installed
          if ! command -v nginx &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
          fi
          
          # Configure Nginx
          sudo tee /etc/nginx/sites-available/frontend << 'EOF'
          server {
              listen 80;
              server_name _;

              root /home/ubuntu/app;
              index index.html;

              location / {
                  try_files \$uri \$uri/ /index.html;
              }
          }
          EOF
          
          # Enable the site
          sudo ln -sf /etc/nginx/sites-available/frontend /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default
          
          # Test and reload Nginx
          sudo nginx -t && sudo systemctl reload nginx
          
          # Start the application with PM2
          cd ~/app && pm2 serve . 3000 --name frontend --spa
          
          # Save PM2 configuration
          pm2 save
        "
